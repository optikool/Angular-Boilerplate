Observables in Angular
Observables provide support for passing messages between publishers and subscribers in your application. Observables offer significant benefits over other techniques for event handling, asynchronous programming, and handling multiple values.
Observables are declarative—that is, you define a function for publishing values, but it is not executed until a consumer subscribes to it. The subscribed consumer then receives notifications until the function completes, or until they unsubscribe.
Angular makes use of observables as an interface to handle a variety of common asynchronous operations. For example:
The EventEmitter class extends Observable.
The HTTP module uses observables to handle AJAX requests and responses.
The Router and Forms modules use observables to listen for and respond to user-input events.
Event emitter
Angular provides an EventEmitter class that is used when publishing values from a component through the @Output() decorator. EventEmitter extends Observable, adding an emit() method so it can send arbitrary values. When you call emit(), it passes the emitted value to the next() method of any subscribed observer.
HTTP
Angular’s HttpClient returns observables from HTTP method calls. For instance, http.get(‘/api’) returns an observable. This provides several advantages over promise-based HTTP APIs:

Observables do not mutate the server response (as can occur through chained .then() calls on promises). Instead, you can use a series of operators to transform values as needed.
HTTP requests are cancellable through the unsubscribe() method.
Requests can be configured to get progress event updates.
Failed requests can be retried easily.

RxJS
Reactive programming is an asynchronous programming paradigm concerned with data streams and the propagation of change (Wikipedia). RxJS (Reactive Extensions for JavaScript) is a library for reactive programming using observables that makes it easier to compose asynchronous or callback-based code (RxJS Docs).
@ngrx/store https://github.com/ngrx/platform/blob/master/docs/store/README.md
RxJS powered state management for Angular applications, inspired by Redux

@ngrx/store is a controlled state container designed to help write performant, consistent applications on top of Angular. Core tenets:

State is a single, immutable data structure.
Actions describe state changes.
Pure functions called reducers take the previous state and the next action to compute the new state.
State accessed with the Store, an observable of state and an observer of actions.
These core principles enable building components that can use the OnPush change detection strategy giving you intelligent, performant change detection throughout your application.
@ngrx/effects https://github.com/ngrx/platform/blob/master/docs/effects/README.md
RxJS powered side effect model for @ngrx/store

@ngrx/effects provides an API to model event sources as actions. Effects:

Listen for actions dispatched from @ngrx/store.
Isolate side effects from components, allowing for more pure components that select state and dispatch actions.
Provide new sources of actions to reduce state based on external interactions such as network requests, web socket messages and time-based events.
https://angularfirebase.com/lessons/sharing-data-between-angular-components-four-methods/